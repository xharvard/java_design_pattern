适配器模式把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够在一起工作。

适配器模式有类的适配器模式和对象的适配器模式两种不同的形式。

（采用继承实现）
◆类的适配器模式把适配的类的API转换成为目标类的API。（cn.xharvard.scrum1.adapter.*）
	目标(Target)角色：这就是所期待得到的接口。
	源(Adapee)角色：现在需要适配的接口。
	适配器(Adaper)角色：适配器类是本模式的核心。适配器把源接口转换成目标接口。

	
（采用对象组合方式实现）
◆对象的适配器模式把被适配的类的API转换成为目标类的API，与类的适配器模式不同的是，
     使用委派关系连接到Adaptee类。(cn.xharvard.scrum1.adapter.wrapper.*)
    
类适配器和对象适配器的权衡
　　●类适配器使用对象继承的方式，是静态的定义方式；而对象适配器使用对象组合的方式，是动态组合的方式。
　　●对于类适配器，由于适配器直接继承了Adaptee，使得适配器不能和Adaptee的子类一起工作，因为继承是静态的关系，当适配器继承了Adaptee后，就不可能再去处理  Adaptee的子类了。
  　　 对于对象适配器，一个适配器可以把多种不同的源适配到同一个目标。换言之，同一个适配器可以把源类和它的子类都适配到目标接口。因为对象适配器采用的是对象组合的关系，只要对象类型正确，是不是子类都无所谓。
　　●对于类适配器，适配器可以重定义Adaptee的部分行为，相当于子类覆盖父类的部分实现方法。
  　　 对于对象适配器，要重定义Adaptee的行为比较困难，这种情况下，需要定义Adaptee的子类来实现重定义，然后让适配器组合子类。虽然重定义Adaptee的行为比较困难，但是想要增加一些新的行为则方便的很，而且新增加的行为可同时适用于所有的源。
　　●对于类适配器，仅仅引入了一个对象，并不需要额外的引用来间接得到Adaptee。
  　　 对于对象适配器，需要额外的引用来间接得到Adaptee。
建议尽量使用对象适配器的实现方式，多用合成/聚合、少用继承。

◆缺省适配模式（cn.xharvard.scrum1.adapter.defaultadapter.*）
 	缺省适配模式是一种“平庸”化的适配器模式。
 	在任何时候，如果不准备实现一个接口的所有方法时，就可以使用“缺省适配模式”制造一个抽象类，
 	给出所有方法的平庸的具体实现。这样，从这个抽象类再继承下去的子类就不必实现所有的方法了。
 	
鸣谢： ref/shipeiqi.htm作者
作成日：2015/8/31